import pandas as pd
import numpy as np

from config.config import *


def update_dataframes(df_dict):
    """
    Update dataframe columns and rename them.
    """
    df_dict[TOTAL_VULN] = pd.DataFrame({"Total Vulnerabilities": [df_dict[TOTAL_VULN]]})
    df_dict[UNIQUE_VULN] = pd.DataFrame(
        {"Total Unique Vulnerabilities": [df_dict[UNIQUE_VULN]]}
    )
    df_dict[VULN_BY_BASE] = df_dict[VULN_BY_BASE].rename(
        columns={"count": "Total Vulnerabilities", "nunique": "Unique Vulnerabilities"}
    )
    df_dict[VULN_BY_IMAGE_SEVERITY] = df_dict[VULN_BY_IMAGE_SEVERITY][
        [CRITICAL, HIGH, MEDIUM, LOW]
    ]
    df_dict[PRIORITY_SCORE] = df_dict[PRIORITY_SCORE][
        [IMAGE_NAME, CRITICAL, HIGH, MEDIUM, LOW, PRIORITY_SCORE]
    ]
    df_dict[VULN_BY_PRODUCT_BASE] = df_dict[VULN_BY_PRODUCT_BASE].rename(
        "Total Unique CVEs"
    )
    return df_dict


def remove_duplicate_fix_versions(fix_versions):
    """
    Create set of fix versions by removing duplicates and NaN values.
    """
    fix_versions = list(set(fix_versions))
    if np.nan in fix_versions:
        fix_versions.remove(np.nan)
    return fix_versions


def vulnerabilities_by_BaseImage(cve_details_df):
    vuln_by_base = (
        cve_details_df.groupby(BASE_IMAGE)[CVE_ID]
        .agg(["count", "nunique"])
        .sort_values(by=BASE_IMAGE)
    )
    vuln_by_base = vuln_by_base.sort_values(
        by=["count", "nunique"], ascending=[False, False]
    )
    return vuln_by_base


def calculate_priority_scores(severity_counts_df):
    """
    Calculate priority scores for each image based on vulnerability severities.
    """
    severity_counts_df[PRIORITY_SCORE] = (
        severity_counts_df[CRITICAL] * CRITICAL_WEIGHT
        + severity_counts_df[HIGH] * HIGH_WEIGHT
        + severity_counts_df[MEDIUM] * MEDIUM_WEIGHT
        + severity_counts_df[LOW] * LOW_WEIGHT
    )
    severity_counts_df = severity_counts_df.sort_values(
        by=PRIORITY_SCORE, ascending=False
    )
    return severity_counts_df.reset_index()


def sort_products_by_vulnerability_counts(cve_details_df):
    """
    Sorts product by vulnerabilities for every base image.
    """
    vuln_by_product_base = (
        cve_details_df.groupby([BASE_IMAGE, PRODUCT])[CVE_ID].nunique().reset_index()
    )
    vuln_by_product_base.columns = [BASE_IMAGE, PRODUCT, CVE_ID]
    vuln_by_product_base = vuln_by_product_base.sort_values(
        by=[BASE_IMAGE, CVE_ID], ascending=[True, False]
    )
    vuln_by_product_base = vuln_by_product_base.set_index([BASE_IMAGE, PRODUCT])[CVE_ID]
    return vuln_by_product_base
